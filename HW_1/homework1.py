from math import sqrt

# Задание 1. Встроенные типы данных, функции и операторы.
#
# Напишите реализации объявленных ниже функций. Для проверки
# корректности реализации ваших функций, запустите этот файл
# на выполнение с помощью интерпретатора:
#
# python3 homework1.py
#
# Если написанный вами код не содержит синтаксических ошибок,
# вы увидите результаты тестов ваших решений.


# 1. Факториал
#
# Факториал числа N - произведение всех целых чисел от 1 до N
# включительно. Например, факториал числа 5 - произведение
# чисел 1, 2, 3, 4, 5.
#
# Функция должна вернуть факториал аргумента, числа n.
#
# Подсказка по реализации: для генерации последовательности
# чисел используйте цикл for и библиотечную функцию range.

def fac(n):
    res = 1
    for i in range(1, n + 1):
        res *= i
    return res

# 2. Наибольший общий делитель (НОД) для двух целых чисел.
#
# Предполагаем, что оба аргумента - положительные числа
# Воспользуйтесь методом Эвклида, согласно которому
#
# 1. НОД(a, 0) = a
# 2. НОД(a, b) = НОД(b, a mod b)
#
# (mod - операция взятия остатка от деления, в python - оператор '%')
# Другими словами, вам необходимо написать цикл, в теле
# которого будет будет выполняться операция, описанная
# уравнением (2), пока b не станет равно 0.

def gcd(a, b):
    if b is 0:
        return a
    a, b = b, a % b
    return gcd(a, b)


# 3. Генератор для ряда Фибоначчи
#
# Вам необходимо сгенерировать бесконечный ряд чисел Фибоначчи,
# в котором каждый последующий элемент ряда является суммой двух
# предыдущих. Начало последовательности: 1, 1, 2, 3, 5, 8, 13, ..
# 
# Подсказка по реализации: для бесконечного цикла используйте идиому
#
# while True:
#   ..
#
# Для возврата значений из генератора используйте yield.

def fib():
    a, b = 0, 1
    while True:
        a, b = b, a + b
        yield a


# 4. Вещественные корни квадратного уравнения
#
# Формулы здесь: http://bit.ly/1qJYR0y
# Найдите дискриминант D, и, в зависимости от его значения
#
# если D > 0, вычислите и верните два корня в виде кортежа (tuple),
# если D = 0, один корень,
# если D < 0, верните None
#
# Подсказка по реализации: для вычисления квадратного корня
# используйте функцию sqrt (она уже импортирована в этом файле).

def quadratic(a, b, c):
    d = b**2 - 4 * a * c 
    if d > 0:
        return (-b + sqrt(d))/ (2 * a), (-b - sqrt(d))/ (2 * a) 
    elif d is 0:
        return (-b) / (2 * a)
    else:
        return None

##### Конец задания. Дальше идет проверочный код, который вы не правите.

import unittest

class Test(unittest.TestCase):
    def test_fac(self):
        self.assertEqual(fac(4), 24)
        self.assertEqual(fac(5), 120)
        self.assertEqual(fac(6), 720)

    def test_gcd(self):
        self.assertEqual(gcd(8, 12), 4)
        self.assertEqual(gcd(70, 105), 35)

    def test_fib(self):
        f = fib()
        self.assertEqual(next(f), 1)
        self.assertEqual(next(f), 1)
        self.assertEqual(next(f), 2)
        self.assertEqual(next(f), 3)
        self.assertEqual(next(f), 5)
        self.assertEqual(next(f), 8)

    def test_quadratic(self):
        self.assertIsInstance(quadratic(1, -5, 6), tuple)
        self.assertAlmostEqual(quadratic(2, 4, 2), -1.0)
        self.assertIsNone(quadratic(1, 2, 3))


if __name__ == '__main__':
    unittest.main()
